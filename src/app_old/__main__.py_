import eel
import csv
import math

from src.animated_replay.config import *

from PIL import Image


@eel.expose
def get_replay_list():
    replays_dir = os.path.join(APP_DATA_DIRECTORY, "replays")

    return [name for name in os.listdir(replays_dir) if os.path.isdir(os.path.join(replays_dir, name))]


@eel.expose
def get_replay_bitmap(replay):
    replay_dir = os.path.join(APP_DATA_DIRECTORY, "replays", replay)
    replay_map_dir = os.path.join(replay, "map")

    out_bitmap = []

    class Definition:
        def __init__(self, row):
            self.id = row[0]
            self.name = row[4],
            self.red = row[1],
            self.green = row[2],
            self.blue = row[3],
            self.extra = row[5]

    definitions = {}

    bitmap_image: Image.Image
    definitions_file = None

    if os.path.isdir(replay_map_dir):
        bitmap_image = Image.open(os.path.join(replay_map_dir, "provinces.bmp"), "r")
        definitions_file = open(os.path.join(replay_map_dir, "definition.csv"), "rt")
    else:
        bitmap_image = Image.open(os.path.join(EU4_GAME_DIRECTORY, "map/provinces.bmp"), "r")
        definitions_file = open(os.path.join(EU4_GAME_DIRECTORY, "map/definition.csv"), "rt")

    with definitions_file:
        reader = csv.reader(definitions_file, delimiter=";")

        for row in list(reader)[1:]:
            definition = Definition(row)
            color = (int(row[1]), int(row[2]), int(row[3]))

            definitions[color] = definition

    closed_colors = set()

    index = 0

    with bitmap_image:
        for pixel in bitmap_image.getdata():
            if pixel in closed_colors:
                continue

            y = math.floor(index / bitmap_image.width)
            x = index - bitmap_image.width * y

            definition = definitions.get(pixel)

            closed_colors.add(pixel)
            index += 1


dir_name = os.path.dirname(__file__)
web_root = os.path.join(dir_name, "www/")

eel.init(web_root)
eel.start("index.html", port=6064, mode="edge")
